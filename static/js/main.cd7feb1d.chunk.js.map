{"version":3,"sources":["TrumpCountdown.js","YearCountdown.js","App.js","index.js"],"names":["TrumpCountdown","useState","Date","date","setDate","end","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","year","getFullYear","month","getMonth","day","getDate","className","delta","Math","abs","days","floor","hours","seconds","round","monthNames","daysInYear","isLeapYear","YearCountdown","hoursInMonth","nextMonth","monthStart","getTime","hoursCompleted","hoursLeft","hoursPercent","daysIntoYear","ceil","daysLeft","daysPercent","toFixed","App","tab","setTab","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd7feb1d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction TrumpCountdown() {\n  const [date, setDate] = useState(new Date());\n  const end = new Date(\"1/20/2021\");\n\n  useInterval(() => {\n    setDate(new Date());\n  }, 1000)\n\n\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n\n  if (month === 0 && year === 2021 && day === 20) {\n    return <div className=\"content\">It's fuckin' over today!</div>\n  }\n\n  var delta = Math.abs(end - date) / 1000;\n  var days = Math.floor(delta / 86400);\n  delta -= days * 86400;\n  var hours = Math.floor(delta / 3600) % 24;\n  delta -= hours * 3600;\n  var minutes = Math.floor(delta / 60) % 60;\n  delta -= minutes * 60;\n  var seconds = delta % 60;\n\n  return (\n    <div className=\"content\">\n      {days} days, {hours} hours, {Math.round(seconds, 2)} seconds until the day Trump leaves office.\n    </div>\n  );\n}\n\nexport default TrumpCountdown;\n","import React, { useState, useEffect, useRef } from 'react';\n\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\", \"January\"\n];\n\nfunction daysInYear(year) {\n  return isLeapYear(year) ? 366 : 365;\n}\n\nfunction isLeapYear(year) {\n  return year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0);\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction YearCountdown() {\n  const [date, setDate] = useState(new Date());\n\n  useInterval(() => {\n    setDate(new Date());\n  }, 1000)\n\n  const hoursInMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate() * 24;\n  const nextMonth = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n  const monthStart = new Date(date.getFullYear(), date.getMonth(), 1).getTime();\n  const now = date.getTime();\n  const hoursCompleted = (now - monthStart) / 1000 / 60 / 60;\n  const hoursLeft = hoursInMonth - hoursCompleted;\n  const hoursPercent = hoursCompleted / hoursInMonth * 100;\n  const daysIntoYear = Math.ceil((date - new Date(date.getFullYear(), 0, 1)) / 86400000);\n  const daysLeft = daysInYear(date.getFullYear()) - daysIntoYear;\n  const daysPercent = daysIntoYear / daysInYear(date.getFullYear()) * 100;\n\n  return (\n    <>\n      <p>\n        It's {monthNames[date.getMonth()]}. {hoursLeft.toFixed(2)} hours until {monthNames[nextMonth.getMonth()]}.\n           <br />\n        {hoursPercent.toFixed(2)}% through the month.\n        </p>\n      <p>\n        {daysLeft} days left in {date.getFullYear()}.\n          <br />\n        {daysPercent.toFixed(2)}% through the year.\n        </p>\n    </>\n  );\n}\n\nexport default YearCountdown;\n","import React, { useState } from 'react';\nimport TrumpCountdown from './TrumpCountdown';\nimport YearCountdown from './YearCountdown';\nimport './App.css';\n\nfunction App() {\n  const [tab, setTab] = useState(0);\n\n  return <div className=\"app\">\n    <div className=\"buttons\">\n      <button className={tab === 0 ? \"selected\" : \"\"} onClick={() => setTab(0)}>The End of Trump's Presidency</button>\n      <button className={tab === 1 ? \"selected\" : \"\"} onClick={() => setTab(1)}>The End of 2020</button>\n    </div>\n    <div className=\"content\">\n      {tab === 0 && <TrumpCountdown />}\n      {tab === 1 && <YearCountdown />}\n    </div>\n  </div>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}